<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit.NET5"
                    xmlns:chrome="clr-namespace:Xceed.Wpf.Toolkit.Chromes;assembly=Xceed.Wpf.Toolkit.NET5">

    <Style TargetType="{x:Type xctk:ButtonSpinner}">
        <Setter Property="Width"
                Value="55" />
        <Setter Property="Height"
                Value="26" />
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="IsTabStop"
                Value="True" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Margin"
                Value="2" />
        <Setter Property="Effect"
                Value="{StaticResource dropShadow}" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:ButtonSpinner}">
                    <Border x:Name="Border"
                            SnapsToDevicePixels="True"
                            Background="{StaticResource BackgroundColor}"
                            BorderThickness="2"
                            BorderBrush="{StaticResource ForegroundColor}"
                            CornerRadius="2">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="firstContentColumn"
                                                  Width="*" />
                                <ColumnDefinition x:Name="secondContentColumn"
                                                  Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="contentPresenter"
                                              Focusable="False"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                            <Grid x:Name="gridContent"
                                  Grid.Column="1"
                                  Width="{TemplateBinding SpinnerWidth}"
                                  Height="{TemplateBinding SpinnerHeight}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>

                                <RepeatButton x:Name="PART_IncreaseButton"
                                              Style="{DynamicResource {x:Static themes:ResourceKeys.SpinnerButtonStyleKey}}"
                                              IsTabStop="{TemplateBinding IsTabStop}"
                                              ContentTemplate="{TemplateBinding SpinnerUpContentTemplate}">

                                </RepeatButton>

                                <RepeatButton x:Name="PART_DecreaseButton"
                                              Grid.Row="1"
                                              Style="{DynamicResource {x:Static themes:ResourceKeys.SpinnerButtonStyleKey}}"
                                              IsTabStop="{TemplateBinding IsTabStop}"
                                              ContentTemplate="{TemplateBinding SpinnerDownContentTemplate}">
                                </RepeatButton>

                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ShowButtonSpinner"
                                 Value="False">
                            <Setter Property="Visibility"
                                    Value="Collapsed"
                                    TargetName="gridContent" />
                        </Trigger>
                        <Trigger Property="ShowSpinner"
                                 Value="False">
                            <Setter Property="Visibility"
                                    Value="Collapsed"
                                    TargetName="gridContent" />
                        </Trigger>
                        <Trigger SourceName="PART_IncreaseButton"
                                 Property="IsEnabled"
                                 Value="False">
                            <Setter TargetName="PART_IncreaseButton"
                                    Property="ContentTemplate"
                                    Value="{Binding SpinnerUpDisabledContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger SourceName="PART_DecreaseButton"
                                 Property="IsEnabled"
                                 Value="False">
                            <Setter TargetName="PART_DecreaseButton"
                                    Property="ContentTemplate"
                                    Value="{Binding SpinnerDownDisabledContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="SpinnerLocation"
                                 Value="Left">
                            <Setter TargetName="firstContentColumn"
                                    Property="Width"
                                    Value="Auto" />
                            <Setter TargetName="secondContentColumn"
                                    Property="Width"
                                    Value="*" />
                            <Setter TargetName="contentPresenter"
                                    Property="Grid.Column"
                                    Value="1" />
                            <Setter TargetName="gridContent"
                                    Property="Grid.Column"
                                    Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type themes:ResourceKeys}, ResourceId=SpinnerButtonStyleKey}"
           TargetType="RepeatButton">
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Padding"
                Value="0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Grid>
                        <chrome:ButtonChrome x:Name="Chrome"
                                             BorderThickness="0"
                                             Background="{StaticResource AccentColor}"
                                             CornerRadius="0,2,2,0"
                                             RenderEnabled="{TemplateBinding IsEnabled}"
                                             RenderMouseOver="{TemplateBinding IsMouseOver}"
                                             RenderNormal="True"
                                             RenderPressed="{TemplateBinding IsPressed}"
                                             SnapsToDevicePixels="true" />
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type xctk:IntegerUpDown}">
        <Setter Property="Foreground"
                Value="{StaticResource TextColor_1}" />
        <Setter Property="FontWeight"
                Value="Bold" />
        <Setter Property="TextAlignment"
                Value="Center" />
    </Style>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type themes:ResourceKeys}, ResourceId=GlyphNormalForegroundKey}"
                     Color="Black" />
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type themes:ResourceKeys}, ResourceId=GlyphDisabledForegroundKey}"
                     Color="WhiteSmoke" />
    <Style TargetType="{x:Type xctk:ButtonChrome}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type chrome:ButtonChrome}">
                    <Grid>
                        <Border x:Name="OuterBorder"
                                CornerRadius="{TemplateBinding CornerRadius}"
                                Background="{TemplateBinding Background}" />
                        <Border x:Name="MouseOverVisual"
                                Opacity="0"
                                Visibility="Collapsed"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}" />
                        <Border x:Name="PressedVisual"
                                Opacity="0"
                                Visibility="Collapsed"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}" />
                        <Border x:Name="FocusVisual"
                                Opacity="0"
                                Visibility="Collapsed"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}" />

                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          IsEnabled="{TemplateBinding IsEnabled}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />

                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- If button is disabled, not checked, and is rendered normal -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled"
                                           Value="False" />
                                <Condition Property="RenderChecked"
                                           Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                                    Property="Background"
                                    Value="{StaticResource DisabledColor}" />
                        </MultiTrigger>
                        <!-- if button is enabled and pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled"
                                           Value="True" />
                                <Condition Property="RenderPressed"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                                    Property="Background"
                                    Value="{StaticResource HoverColor}" />
                        </MultiTrigger>
                        <!-- if button is enabled, is not checked, the mouse is over, and not pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled"
                                           Value="True" />
                                <Condition Property="RenderChecked"
                                           Value="False" />
                                <Condition Property="RenderMouseOver"
                                           Value="True" />
                                <Condition Property="RenderPressed"
                                           Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                                    Property="Background"
                                    Value="{StaticResource HoverColor}" />
                        </MultiTrigger>
                        <!-- if button is enabled, checked, the mouse is not over, and it is not pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled"
                                           Value="True" />
                                <Condition Property="RenderChecked"
                                           Value="True" />
                                <Condition Property="RenderMouseOver"
                                           Value="False" />
                                <Condition Property="RenderPressed"
                                           Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                                    Property="BorderBrush"
                                    Value="Green" />
                            <Setter TargetName="OuterBorder"
                                    Property="Background"
                                    Value="Lime" />
                        </MultiTrigger>
                        <!-- if button is focused, is enabled, not pressed, and the mouse is not over -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderFocused"
                                           Value="True" />
                                <Condition Property="RenderEnabled"
                                           Value="True" />
                                <Condition Property="RenderPressed"
                                           Value="False" />
                                <Condition Property="RenderMouseOver"
                                           Value="False" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <!-- if not rendered normally -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderNormal"
                                           Value="False" />
                                <Condition Property="RenderChecked"
                                           Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                                    Property="BorderBrush"
                                    Value="Blue" />
                            <Setter TargetName="OuterBorder"
                                    Property="Background"
                                    Value="Cyan" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>